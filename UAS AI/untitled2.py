# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vtOg0KnpxaCh_joZlZVy6eqKvqmh2dmk
"""

pip install scikit-fuzzy

import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
import pandas as pd

# 1. Definisikan variabel fuzzy
kdsp = ctrl.Antecedent(np.arange(0, 11, 1), 'kedisiplinan')
prdt = ctrl.Antecedent(np.arange(0, 11, 1), 'produktivitas')
krjs = ctrl.Antecedent(np.arange(0, 11, 1), 'kerjasama')
khdr = ctrl.Antecedent(np.arange(0, 11, 1), 'kehadiran')
perf = ctrl.Consequent(np.arange(0, 101, 1), 'performa')

# 2. Fungsi keanggotaan
for var in [kdsp, prdt, krjs, khdr]:
    var['rendah'] = fuzz.trapmf(var.universe, [0, 0, 2, 4])
    var['sedang'] = fuzz.trimf(var.universe, [3, 5, 7])
    var['tinggi'] = fuzz.trapmf(var.universe, [6, 8, 10, 10])

perf['buruk'] = fuzz.trapmf(perf.universe, [0, 0, 25, 40])
perf['cukup'] = fuzz.trimf(perf.universe, [35, 50, 65])
perf['baik'] = fuzz.trimf(perf.universe, [60, 75, 85])
perf['sangat_baik'] = fuzz.trapmf(perf.universe, [80, 90, 100, 100])

# 3. Aturan fuzzy
rules = [
    ctrl.Rule(kdsp['tinggi'] & prdt['tinggi'] & krjs['tinggi'] & khdr['tinggi'], perf['sangat_baik']),
    ctrl.Rule(kdsp['rendah'] | prdt['rendah'] | krjs['rendah'] | khdr['rendah'], perf['buruk']),
    ctrl.Rule(kdsp['sedang'] & prdt['sedang'], perf['cukup']),
    ctrl.Rule(kdsp['tinggi'] & prdt['sedang'], perf['baik']),
    ctrl.Rule(kdsp['sedang'] & prdt['tinggi'], perf['baik']),
]

# 4. Bangun sistem fuzzy
system = ctrl.ControlSystem(rules)
simulator = ctrl.ControlSystemSimulation(system)

# 5. Proses multi-karyawan
data_karyawan = []

print("=== INPUT PENILAIAN KARYAWAN ===")
while True:
    nama = input("Nama Karyawan (kosongkan untuk selesai): ")
    if nama.strip() == "":
        break

    try:
        kd = float(input("  Kedisiplinan (0-10): "))
        pr = float(input("  Produktivitas (0-10): "))
        kr = float(input("  Kerjasama Tim (0-10): "))
        kh = float(input("  Kehadiran (0-10): "))

        simulator.input['kedisiplinan'] = kd
        simulator.input['produktivitas'] = pr
        simulator.input['kerjasama'] = kr
        simulator.input['kehadiran'] = kh
        simulator.compute()
        nilai = simulator.output['performa']

        if nilai >= 80:
            kategori = "Sangat Baik"
        elif nilai >= 65:
            kategori = "Baik"
        elif nilai >= 50:
            kategori = "Cukup"
        else:
            kategori = "Buruk"

        data_karyawan.append({
            "Nama": nama,
            "Kedisiplinan": kd,
            "Produktivitas": pr,
            "Kerjasama": kr,
            "Kehadiran": kh,
            "Nilai Fuzzy": round(nilai, 2),
            "Kategori": kategori
        })

    except:
        print("Input tidak valid, silakan ulangi.")

# 6. Tampilkan hasil
print("\n=== HASIL PENILAIAN ===")
df = pd.DataFrame(data_karyawan)
print(df.to_string(index=False))

# 7. Simpan ke file CSV (opsional)
simpan = input("\nSimpan hasil ke file CSV? (y/n): ").lower()
if simpan == 'y':
    df.to_csv("hasil_penilaian_karyawan.csv", index=False)
    print("âœ” Data berhasil disimpan ke 'hasil_penilaian_karyawan.csv'")